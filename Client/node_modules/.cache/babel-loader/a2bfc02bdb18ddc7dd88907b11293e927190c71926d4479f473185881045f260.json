{"ast":null,"code":"import { ADD_FAV, FILTER, REMOVE_FAV, ORDER } from \"./action-types\";\nconst initialState = {\n  myFavorites: [],\n  allCharactersFav: []\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  //el segundo parámetro es action,\n  //y como este es un objeto con dos tiene dos propiedades (type, payload)\n  //hacemos destructuring.\n  switch (type) {\n    case ADD_FAV:\n      // Agrega el personaje que se recibe por payload al estado \"myFavorites\"\n      return {\n        ...state,\n        //Hacemos una copia del estado\n        myFavorites: payload,\n        //El array myFavorites será igual al estado myfavorites concatenando el\n        // payload que es igual a character (al personaje), recordemos que\n        // character es un objeto con las propiedades del personaje\n        allCharactersFav: payload\n      };\n    case REMOVE_FAV:\n      // Elimina a un personaje del estado \"myFavorites\" a partir de un id que recibas por payload\n      return {\n        ...state,\n        //Recordar que el método filter devuelve un nuevo array con los elementos que cumplan con la condición especificada \n        myFavorites: payload,\n        allCharactersFav: payload\n      };\n    case FILTER:\n      const allCharactersFiltered = state.allCharactersFav.filter(character => character.gender === payload);\n      return {\n        ...state,\n        myFavorites: payload === 'allCharacters' ? [...state.allCharactersFav] : allCharactersFiltered\n      };\n    case ORDER:\n      const allCharactersFavCopy = [...state.allCharactersFav];\n      return {\n        ...state,\n        myFavorites: payload === 'A' //Si payload es igual a 'A' entonces:\n        ? allCharactersFavCopy.sort((a, b) => a.id - b.id) //El id del primero tiene que ser menor al id del segundo (menor a mayor)\n        : allCharactersFavCopy.sort((a, b) => b.id - a.id) // El id del segundo tiene que ser menor al id del primero (mayor a menor)\n      };\n\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default reducer;","map":{"version":3,"names":["ADD_FAV","FILTER","REMOVE_FAV","ORDER","initialState","myFavorites","allCharactersFav","reducer","state","arguments","length","undefined","type","payload","allCharactersFiltered","filter","character","gender","allCharactersFavCopy","sort","a","b","id"],"sources":["/home/gustavo_muniz/Henry/rick_and_morty/Client/src/redux/reducer.js"],"sourcesContent":["import { ADD_FAV, FILTER, REMOVE_FAV, ORDER } from \"./action-types\";\r\n\r\nconst initialState = {\r\n    myFavorites: [],\r\n    allCharactersFav: []\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, { type, payload }) => { //el segundo parámetro es action,\r\n                                                                //y como este es un objeto con dos tiene dos propiedades (type, payload)\r\n                                                                //hacemos destructuring.\r\n    switch( type ){\r\n        case ADD_FAV: // Agrega el personaje que se recibe por payload al estado \"myFavorites\"\r\n            return {\r\n                ...state, //Hacemos una copia del estado\r\n                myFavorites: payload, //El array myFavorites será igual al estado myfavorites concatenando el\r\n                                                             // payload que es igual a character (al personaje), recordemos que\r\n                                                             // character es un objeto con las propiedades del personaje\r\n                allCharactersFav: payload\r\n            }\r\n\r\n        case REMOVE_FAV: // Elimina a un personaje del estado \"myFavorites\" a partir de un id que recibas por payload\r\n            return {\r\n                ...state,\r\n                //Recordar que el método filter devuelve un nuevo array con los elementos que cumplan con la condición especificada \r\n                myFavorites: payload,\r\n                allCharactersFav: payload\r\n            }\r\n        case FILTER:\r\n            const allCharactersFiltered =state.allCharactersFav.filter(character => character.gender === payload)\r\n            return{\r\n                ...state,\r\n                myFavorites: \r\n                    payload === 'allCharacters'\r\n                    ? [...state.allCharactersFav]\r\n                    : allCharactersFiltered\r\n                \r\n            }\r\n        case ORDER:\r\n            const allCharactersFavCopy = [...state.allCharactersFav]\r\n            return {\r\n                ...state,\r\n                myFavorites:\r\n                    payload === 'A'//Si payload es igual a 'A' entonces:\r\n                    ? allCharactersFavCopy.sort((a,b) => a.id - b.id) //El id del primero tiene que ser menor al id del segundo (menor a mayor)\r\n                    : allCharactersFavCopy.sort((a,b) => b.id - a.id) // El id del segundo tiene que ser menor al id del primero (mayor a menor)\r\n            }\r\n\r\n        default:\r\n            return {...state}\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default reducer;"],"mappings":"AAAA,SAASA,OAAO,EAAEC,MAAM,EAAEC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;AAEnE,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACfC,gBAAgB,EAAE;AACtB,CAAC;AAGD,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAA6C;EAAA,IAA5CC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,YAAY;EAAA,IAAE;IAAEQ,IAAI;IAAEC;EAAQ,CAAC,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAO;EACC;EACA;EAC5D,QAAQC,IAAI;IACR,KAAKZ,OAAO;MAAE;MACV,OAAO;QACH,GAAGQ,KAAK;QAAE;QACVH,WAAW,EAAEQ,OAAO;QAAE;QACuB;QACA;QAC7CP,gBAAgB,EAAEO;MACtB,CAAC;IAEL,KAAKX,UAAU;MAAE;MACb,OAAO;QACH,GAAGM,KAAK;QACR;QACAH,WAAW,EAAEQ,OAAO;QACpBP,gBAAgB,EAAEO;MACtB,CAAC;IACL,KAAKZ,MAAM;MACP,MAAMa,qBAAqB,GAAEN,KAAK,CAACF,gBAAgB,CAACS,MAAM,CAACC,SAAS,IAAIA,SAAS,CAACC,MAAM,KAAKJ,OAAO,CAAC;MACrG,OAAM;QACF,GAAGL,KAAK;QACRH,WAAW,EACPQ,OAAO,KAAK,eAAe,GACzB,CAAC,GAAGL,KAAK,CAACF,gBAAgB,CAAC,GAC3BQ;MAEV,CAAC;IACL,KAAKX,KAAK;MACN,MAAMe,oBAAoB,GAAG,CAAC,GAAGV,KAAK,CAACF,gBAAgB,CAAC;MACxD,OAAO;QACH,GAAGE,KAAK;QACRH,WAAW,EACPQ,OAAO,KAAK,GAAG;QAAA,EACbK,oBAAoB,CAACC,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAKD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,CAAC,CAAC;QAAA,EAChDJ,oBAAoB,CAACC,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAKA,CAAC,CAACC,EAAE,GAAGF,CAAC,CAACE,EAAE,CAAC,CAAC;MAC1D,CAAC;;IAEL;MACI,OAAO;QAAC,GAAGd;MAAK,CAAC;EAAA;AAI7B,CAAC;AAGD,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
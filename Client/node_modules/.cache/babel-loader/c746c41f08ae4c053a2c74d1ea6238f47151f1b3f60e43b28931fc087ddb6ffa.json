{"ast":null,"code":"var _jsxFileName = \"/home/gustavo_muniz/Henry/rick_and_morty/Client/src/components/Card/Card.jsx\",\n  _s = $RefreshSig$();\nimport { Link } from 'react-router-dom';\nimport { addFav, removeFav } from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Card(_ref) {\n  _s();\n  let {\n    id,\n    name,\n    species,\n    gender,\n    image,\n    onClose,\n    addFav,\n    removeFav,\n    myFavorites\n  } = _ref;\n  const [isFav, setIsFav] = useState(false);\n  const handleFavorite = () => {\n    if (isFav) {\n      setIsFav(false);\n      removeFav(id);\n    } else {\n      setIsFav(true);\n      addFav({\n        id,\n        name,\n        species,\n        gender,\n        image,\n        onClose\n      }); //Aqui le paso todo el objeto del personaje, ya que es lo que espera el payload de addFav\n    }\n  };\n  //useEffect permite ejecutar c칩digo despu칠s de que un componente se haya renderizado en la pantalla y cada vez que un \n  //estado cambia en el componente.\n  //Este useEffect comprobar치 si el personaje que contiene la Card ya esta dentro de tus favoritos. En ese caso settear치 el \n  //estado isFav en true\n  useEffect(() => {\n    myFavorites.forEach(fav => {\n      //recorre al estado global myFavorites que contiene el objeto de cada personaje\n      if (fav.id === id) {\n        //si el id de ese personaje es igual al id que estamos recibiendo por props entonces:\n        setIsFav(true); //el estado isFav se settea a true\n      }\n    });\n  }, [myFavorites]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\n    //randerizado condicional\n    isFav ?\n    /*#__PURE__*/\n    //isfav en true, entonces: \n    _jsxDEV(\"button\", {\n      onClick: handleFavorite,\n      children: \"\\u2764\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this) :\n    /*#__PURE__*/\n    //isfav en false, entonces:\n    _jsxDEV(\"button\", {\n      onClick: handleFavorite,\n      children: \"\\uD83E\\uDD0D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onClose(id),\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/detail/${id}`,\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }, this);\n}\n//Para asegurarnos que el status del estado local se mantenga aunque nos vayamos y volvamos al componente se agregar치 una mapStateToProps\n_s(Card, \"P/ohr7L6r3Ai4GOhTgqo0B9M8uQ=\");\n_c = Card;\nconst mapStateToProps = state => {\n  //recibe el estado global completo \n  return {\n    myFavorites: state.myFavorites\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  //dispatach de las dos actions\n  //necesitamos despachar siempre para obtener un objeto\n  return {\n    addFav: character => {\n      dispatch(addFav(character));\n    },\n    // Aqui character es igual al objeto {id, name, species, gender, image} que le pasamos como props a addFav\n    removeFav: id => {\n      dispatch(removeFav(id));\n    } // El que se despacha \"removeFav(id)\" es el que importo desde actions,\n    // y el que recibo por props en Card es el que retorna la funci칩n \"removeFav:\"\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["Link","addFav","removeFav","connect","useState","useEffect","jsxDEV","_jsxDEV","Card","_ref","_s","id","name","species","gender","image","onClose","myFavorites","isFav","setIsFav","handleFavorite","forEach","fav","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","to","src","alt","_c","mapStateToProps","state","mapDispatchToProps","dispatch","character","$RefreshReg$"],"sources":["/home/gustavo_muniz/Henry/rick_and_morty/Client/src/components/Card/Card.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport {addFav, removeFav} from '../../redux/actions'\nimport { connect } from 'react-redux';\nimport { useState, useEffect } from 'react';\n\nfunction Card({ id, name, species, gender, image, onClose, addFav, removeFav, myFavorites }) {\n\n   const [isFav, setIsFav] = useState(false);\n\n   const handleFavorite = () => {\n      if (isFav) {\n         setIsFav(false)\n         removeFav(id)\n      } else {\n         setIsFav(true)\n         addFav({id, name, species, gender, image, onClose}) //Aqui le paso todo el objeto del personaje, ya que es lo que espera el payload de addFav\n      }\n   }\n   //useEffect permite ejecutar c칩digo despu칠s de que un componente se haya renderizado en la pantalla y cada vez que un \n   //estado cambia en el componente.\n   //Este useEffect comprobar치 si el personaje que contiene la Card ya esta dentro de tus favoritos. En ese caso settear치 el \n   //estado isFav en true\n   useEffect(() => {\n      myFavorites.forEach((fav) => { //recorre al estado global myFavorites que contiene el objeto de cada personaje\n         if (fav.id === id) { //si el id de ese personaje es igual al id que estamos recibiendo por props entonces:\n            setIsFav(true);   //el estado isFav se settea a true\n         }\n      });\n   }, [myFavorites]);\n\n   return (\n      <div>\n         { //randerizado condicional\n            isFav \n            ? ( //isfav en true, entonces: \n               <button onClick={handleFavorite}>仇벒잺</button>\n            ) : ( //isfav en false, entonces:\n               <button onClick={handleFavorite}>游밼</button>\n            )\n            \n         }\n         <button onClick={() => onClose(id)}>X</button>\n\n         <Link to={`/detail/${id}`}> {/* la ruta me va a dirigir a a /detail mas el id que le pasemos por par치metro a Card */}\n            <h2>{name}</h2>\n         </Link>\n\n{/*          <h2>{species}</h2>\n         <h2>{gender}</h2> */}\n         {/* <h2>{status}</h2>\n         <h2>{origin}</h2> */}\n         <img src={image} alt='' />\n      </div>\n   );\n}\n//Para asegurarnos que el status del estado local se mantenga aunque nos vayamos y volvamos al componente se agregar치 una mapStateToProps\nconst mapStateToProps = (state) => { //recibe el estado global completo \n   return {\n      myFavorites: state.myFavorites\n   }\n}\n\nconst mapDispatchToProps = (dispatch) => { //dispatach de las dos actions\n    //necesitamos despachar siempre para obtener un objeto\n   return {\n      addFav: (character) => {dispatch(addFav(character))}, // Aqui character es igual al objeto {id, name, species, gender, image} que le pasamos como props a addFav\n      removeFav: (id) => {dispatch(removeFav(id))} // El que se despacha \"removeFav(id)\" es el que importo desde actions,\n                                                 // y el que recibo por props en Card es el que retorna la funci칩n \"removeFav:\"\n   }\n}\nexport default connect(\n   mapStateToProps,\n   mapDispatchToProps\n)(Card);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
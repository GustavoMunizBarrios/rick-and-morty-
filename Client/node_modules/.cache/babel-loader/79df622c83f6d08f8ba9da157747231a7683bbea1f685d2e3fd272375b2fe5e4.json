{"ast":null,"code":"var _jsxFileName = \"/home/gustavo_muniz/Henry/rick_and_morty/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Cards from './components/Cards.jsx';\nimport Nav from './components/Nav';\nimport About from './components/About';\nimport Detail from './components/Detail';\nimport Form from './components/Form';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Routes, Route, useLocation, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL_BASE = 'https://be-a-rym.up.railway.app/api/character';\nconst API_KEY = 'f99ef8399d40.cea0bfba7c15f21eb580';\nconst email = 'Gustavo@gmail.com';\nconst password = '123456';\nfunction App() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [characters, setCharacters] = useState([]); //characters es un estado del tipo array de objetos\n  const [acess, setAcces] = useState(false);\n  const login = userData => {\n    if (userData.email === email && userData.password === password) {\n      setAcces(true);\n      navigate('/home');\n    }\n  };\n  useEffect(() => {\n    // cada vez que cambie acess se ejecuta lo que este en useEffect\n    !acess && navigate('/'); // si acess esta en false entonces no va a llevar a otra ruta que no sea /\n  }, [acess]); // El array de dependencias se queda \"escuchando\" a acess\n\n  // La función onSearch agrega un nuevo personaje al estado local characters\n  const onSearch = id => {\n    //Con axios le hago peticiones a una api al servidor, el id lo estamos obteniendo del input, \n    //es decir de lo que escribe el usuario. \n\n    axios(`${URL_BASE}/${id}?key=${API_KEY}`)\n    //Una vez que se ejecuta la petición, obtengo la respuesta con .then\n    //Axios retorna un objeto con una propiedad llamada data y ahi dentro es donde tengo la información de la api\n    .then(response => response.data) //de la respuesta que me retorna me quedo con data\n    .then(data => {\n      if (data.name) {\n        // si hay un data.name entonces \n        //setea characters [Crea una copia de todo lo que tenia characters(...oldChars), concatena la nueva respuesta (data)]\n        setCharacters(oldChars => [...oldChars, data]);\n      } else {\n        window.alert('¡No hay personajes con este ID!');\n      }\n    });\n  };\n  const onClose = id => {\n    //El método filter retornará los elementos del array que cumplan la condición especificada en la función callback\n    // Es decir me retornará un array con los characters que no contangan el id que le pase por parámetro.\n    const charactersFiltered = characters.filter(character => character.id !== id); // si da true se queda si da false se va el character\n    setCharacters(charactersFiltered);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [location.pathname !== '/' && /*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 42\n    }, this) //pathname me dice en donde esta el usuario\n    , /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Form, {\n          login: login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/home\",\n        element: /*#__PURE__*/_jsxDEV(Cards, {\n          characters: characters,\n          onClose: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/detail/:id\",\n        element: /*#__PURE__*/_jsxDEV(Detail, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"VxITX3p7CL4FUHd++TrJfbe6Bd0=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Cards","Nav","About","Detail","Form","useState","useEffect","axios","Routes","Route","useLocation","useNavigate","jsxDEV","_jsxDEV","URL_BASE","API_KEY","email","password","App","_s","location","navigate","characters","setCharacters","acess","setAcces","login","userData","onSearch","id","then","response","data","name","oldChars","window","alert","onClose","charactersFiltered","filter","character","className","children","pathname","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/home/gustavo_muniz/Henry/rick_and_morty/src/App.js"],"sourcesContent":["import './App.css';\nimport Cards from './components/Cards.jsx';\nimport Nav from './components/Nav';\nimport About from './components/About';\nimport Detail from './components/Detail';\nimport Form from './components/Form';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Routes, Route, useLocation, useNavigate } from 'react-router-dom';\n\nconst URL_BASE = 'https://be-a-rym.up.railway.app/api/character';\nconst API_KEY = 'f99ef8399d40.cea0bfba7c15f21eb580';\n\nconst email = 'Gustavo@gmail.com'\nconst password = '123456'\n\nfunction App() {\n   const location = useLocation();\n   const navigate = useNavigate()\n   const [characters, setCharacters] = useState([]); //characters es un estado del tipo array de objetos\n   const [acess, setAcces] = useState(false);\n\n   const login = (userData) => {\n      if(userData.email === email && userData.password === password){\n         setAcces(true);\n         navigate('/home');\n      }\n   }\n\n   useEffect(() => { // cada vez que cambie acess se ejecuta lo que este en useEffect\n      !acess && navigate('/') // si acess esta en false entonces no va a llevar a otra ruta que no sea /\n   }, [acess]) // El array de dependencias se queda \"escuchando\" a acess\n\n   // La función onSearch agrega un nuevo personaje al estado local characters\n   const onSearch = (id) => {\n      //Con axios le hago peticiones a una api al servidor, el id lo estamos obteniendo del input, \n      //es decir de lo que escribe el usuario. \n\n      axios(`${URL_BASE}/${id}?key=${API_KEY}`)\n      //Una vez que se ejecuta la petición, obtengo la respuesta con .then\n      //Axios retorna un objeto con una propiedad llamada data y ahi dentro es donde tengo la información de la api\n\n      .then(response => response.data)  //de la respuesta que me retorna me quedo con data\n      .then((data) => { \n         if (data.name) { // si hay un data.name entonces \n            //setea characters [Crea una copia de todo lo que tenia characters(...oldChars), concatena la nueva respuesta (data)]\n            setCharacters((oldChars) => [...oldChars, data]); \n         } else {\n            window.alert('¡No hay personajes con este ID!');\n         }\n      });\n   }\n\n   const onClose = (id) => {\n      //El método filter retornará los elementos del array que cumplan la condición especificada en la función callback\n      // Es decir me retornará un array con los characters que no contangan el id que le pase por parámetro.\n      const charactersFiltered = characters.filter(character => character.id !== id)// si da true se queda si da false se va el character\n      setCharacters(charactersFiltered)\n   }\n\n   return (\n      <div className='App'>\n         {\n            location.pathname !== '/' && <Nav onSearch={onSearch} />   //pathname me dice en donde esta el usuario\n         }\n          {/* le pasamos por propiedad a Nav la función onSearch */}\n\n         {/* Con Route definimos las rutas y que se ve a mostrar en cada una de ellas, después con Link le mostramos a que path se va a dirigir */}\n         <Routes>\n            <Route path='/' element={<Form login={login}/>}/>\n            <Route path='/home' element={ <Cards characters={characters} onClose={onClose}/> }/>\n            <Route path='/about' element={<About/>} />\n            <Route path='/detail/:id' element={<Detail/>} />\n         </Routes>\n        \n      </div>\n   );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
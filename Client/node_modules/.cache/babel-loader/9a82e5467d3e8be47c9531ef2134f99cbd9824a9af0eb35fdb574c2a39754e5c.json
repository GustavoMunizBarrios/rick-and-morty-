{"ast":null,"code":"var _jsxFileName = \"/home/gustavo_muniz/Henry/rick_and_morty/Client/src/components/Detail.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom'; // useParams nos permite obtener el valor de la variable de la ruta \nimport { useState, useEffect } from 'react';\n\n/* const URL_BASE = 'https://be-a-rym.up.railway.app/api/character';\r\nconst API_KEY = 'f99ef8399d40.cea0bfba7c15f21eb580'; */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Detail = () => {\n  _s();\n  var _character$origin;\n  //useParams es un objeto que contiene la propiedad id (el cual viene de la ruta 'detail/:id')\n  const {\n    id\n  } = useParams();\n\n  //character será un objeto con la información de un personaje (es diferente de characters)\n  const [character, setCharacter] = useState({});\n\n  // El siguiente código buscará al personaje de la API cada vez que el componente se monte,\n  // después cada vez que se desmonte, borrara su información ( return setCharacter({}) ).\n  // El componente se actualizará cada vez que cambie el id.\n\n  // Recordar que useEffect simula los tres ciclos de vida del componente\n  useEffect(() => {\n    axios(`http://localhost:3001/rickandmorty/character/${id}`) // axios hace una petición a la API, cuando axios responde nos da un objeto\n    .then(response => response.data) // Aqui es cuando recibo la respuesta de la API, y me quedo con data que es un objeto\n    .then(data => {\n      // Aquí trabajamos con esa información\n      if (data.name) {\n        //si hay un data.name entonces \n        setCharacter(data); //configura character con la información de data, por lo tanto character será un objeto con la información de un personaje especifico\n      } else {\n        //Si no hay data.name entonces muestra un alert \n        window.alert('No hay personajes con ese ID');\n      }\n    });\n    return setCharacter({}); // retorna character como un objeto vacio\n  }, [id]); // El [id] es un array de dependencias, evita que se haga un loop infinito, Tambien es uno de los \n  // ciclos de vida del componente (componentDidUpdate), esto significa que todo lo que este dentro de useEffect \n  // se va a modificar cada vez que cambie el id\n\n  return (\n    /*#__PURE__*/\n    /* Se randeriza condicionalmente cada propiedad de character */\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: character === null || character === void 0 ? void 0 : character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: character === null || character === void 0 ? void 0 : character.status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: character === null || character === void 0 ? void 0 : character.species\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: character === null || character === void 0 ? void 0 : character.gender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: character === null || character === void 0 ? void 0 : (_character$origin = character.origin) === null || _character$origin === void 0 ? void 0 : _character$origin.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: character === null || character === void 0 ? void 0 : character.image,\n        alt: character === null || character === void 0 ? void 0 : character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(Detail, \"6HTCr1TClwySIPkOyZ8puLIIZ9c=\", false, function () {\n  return [useParams];\n});\n_c = Detail;\nexport default Detail;\nvar _c;\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"names":["axios","useParams","useState","useEffect","jsxDEV","_jsxDEV","Detail","_s","_character$origin","id","character","setCharacter","then","response","data","name","window","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","status","species","gender","origin","src","image","alt","_c","$RefreshReg$"],"sources":["/home/gustavo_muniz/Henry/rick_and_morty/Client/src/components/Detail.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport { useParams } from 'react-router-dom'; // useParams nos permite obtener el valor de la variable de la ruta \r\nimport { useState, useEffect } from 'react';\r\n\r\n/* const URL_BASE = 'https://be-a-rym.up.railway.app/api/character';\r\nconst API_KEY = 'f99ef8399d40.cea0bfba7c15f21eb580'; */\r\n\r\nconst Detail = () => {\r\n    //useParams es un objeto que contiene la propiedad id (el cual viene de la ruta 'detail/:id')\r\n    const { id } = useParams(); \r\n\r\n    //character será un objeto con la información de un personaje (es diferente de characters)\r\n    const [character, setCharacter] = useState({});\r\n     \r\n    // El siguiente código buscará al personaje de la API cada vez que el componente se monte,\r\n    // después cada vez que se desmonte, borrara su información ( return setCharacter({}) ).\r\n    // El componente se actualizará cada vez que cambie el id.\r\n\r\n    // Recordar que useEffect simula los tres ciclos de vida del componente\r\n    useEffect(() => {\r\n        axios(`http://localhost:3001/rickandmorty/character/${id}`) // axios hace una petición a la API, cuando axios responde nos da un objeto\r\n        .then(response => response.data) // Aqui es cuando recibo la respuesta de la API, y me quedo con data que es un objeto\r\n        .then((data) => { // Aquí trabajamos con esa información\r\n           if (data.name) {  //si hay un data.name entonces \r\n              setCharacter(data); //configura character con la información de data, por lo tanto character será un objeto con la información de un personaje especifico\r\n           } else { //Si no hay data.name entonces muestra un alert \r\n              window.alert('No hay personajes con ese ID');\r\n           }\r\n        });\r\n        return setCharacter({}); // retorna character como un objeto vacio\r\n    }, [id]); // El [id] es un array de dependencias, evita que se haga un loop infinito, Tambien es uno de los \r\n              // ciclos de vida del componente (componentDidUpdate), esto significa que todo lo que este dentro de useEffect \r\n              // se va a modificar cada vez que cambie el id\r\n\r\n\r\n    return(\r\n        /* Se randeriza condicionalmente cada propiedad de character */\r\n        <div>\r\n            <h2>{character?.name}</h2> {/* si hay información en character entonces extrae el valor de la propiedad name */}\r\n            <h2>{character?.status}</h2> {/* si hay información en character entonces extrae el valor de la propiedad status */}\r\n            <h2>{character?.species}</h2> {/* si hay información en character entonces extrae el valor de la propiedad species */}\r\n            <h2>{character?.gender}</h2> {/* si hay información en character entonces extrae el valor de la propiedad gender */}\r\n            <h2>{character?.origin?.name}</h2> {/* si hay información en character entonces extrae el valor de la propiedad origin.name */}\r\n            <img src={character?.image} alt={character?.name} /> {/* si hay información en character entonces extrae el valor de la propiedad image */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Detail;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAC9C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AADA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,iBAAA;EACjB;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGR,SAAS,EAAE;;EAE1B;EACA,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE9C;EACA;EACA;;EAEA;EACAC,SAAS,CAAC,MAAM;IACZH,KAAK,CAAE,gDAA+CS,EAAG,EAAC,CAAC,CAAC;IAAA,CAC3DG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC;IAAA,CAChCF,IAAI,CAAEE,IAAI,IAAK;MAAE;MACf,IAAIA,IAAI,CAACC,IAAI,EAAE;QAAG;QACfJ,YAAY,CAACG,IAAI,CAAC,CAAC,CAAC;MACvB,CAAC,MAAM;QAAE;QACNE,MAAM,CAACC,KAAK,CAAC,8BAA8B,CAAC;MAC/C;IACH,CAAC,CAAC;IACF,OAAON,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7B,CAAC,EAAE,CAACF,EAAE,CAAC,CAAC,CAAC,CAAC;EACA;EACA;;EAGV;IAAA;IACI;IACAJ,OAAA;MAAAa,QAAA,gBACIb,OAAA;QAAAa,QAAA,EAAKR,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,KAAC,eAC3BjB,OAAA;QAAAa,QAAA,EAAKR,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEa;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,KAAC,eAC7BjB,OAAA;QAAAa,QAAA,EAAKR,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEc;MAAO;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,KAAC,eAC9BjB,OAAA;QAAAa,QAAA,EAAKR,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEe;MAAM;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,KAAC,eAC7BjB,OAAA;QAAAa,QAAA,EAAKR,SAAS,aAATA,SAAS,wBAAAF,iBAAA,GAATE,SAAS,CAAEgB,MAAM,cAAAlB,iBAAA,uBAAjBA,iBAAA,CAAmBO;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,KAAC,eACnCjB,OAAA;QAAKsB,GAAG,EAAEjB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEkB,KAAM;QAACC,GAAG,EAAEnB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACnD;AAEd,CAAC;AAAAf,EAAA,CAvCKD,MAAM;EAAA,QAEOL,SAAS;AAAA;AAAA6B,EAAA,GAFtBxB,MAAM;AAyCZ,eAAeA,MAAM;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}